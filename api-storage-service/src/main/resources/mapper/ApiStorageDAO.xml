<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.neverend.storage.dao.ApiStorageDAO">
  <resultMap id="BaseResultMap" type="com.neverend.storage.entity.ApiStorage">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="product_id" jdbcType="BIGINT" property="productId" />
    <result column="pro_total" jdbcType="INTEGER" property="proTotal" />
    <result column="pro_used" jdbcType="INTEGER" property="proUsed" />
    <result column="residue" jdbcType="INTEGER" property="residue" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, product_id, pro_total, pro_used, residue
  </sql>
  <select id="selectByExample" parameterType="com.neverend.storage.entity.ApiStorageExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from api_storage
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from api_storage
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from api_storage
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.neverend.storage.entity.ApiStorageExample">
    delete from api_storage
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.neverend.storage.entity.ApiStorage">
    insert into api_storage (id, product_id, pro_total, 
      pro_used, residue)
    values (#{id,jdbcType=BIGINT}, #{productId,jdbcType=BIGINT}, #{proTotal,jdbcType=INTEGER}, 
      #{proUsed,jdbcType=INTEGER}, #{residue,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.neverend.storage.entity.ApiStorage">
    insert into api_storage
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="productId != null">
        product_id,
      </if>
      <if test="proTotal != null">
        pro_total,
      </if>
      <if test="proUsed != null">
        pro_used,
      </if>
      <if test="residue != null">
        residue,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="productId != null">
        #{productId,jdbcType=BIGINT},
      </if>
      <if test="proTotal != null">
        #{proTotal,jdbcType=INTEGER},
      </if>
      <if test="proUsed != null">
        #{proUsed,jdbcType=INTEGER},
      </if>
      <if test="residue != null">
        #{residue,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.neverend.storage.entity.ApiStorageExample" resultType="java.lang.Long">
    select count(*) from api_storage
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update api_storage
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.productId != null">
        product_id = #{record.productId,jdbcType=BIGINT},
      </if>
      <if test="record.proTotal != null">
        pro_total = #{record.proTotal,jdbcType=INTEGER},
      </if>
      <if test="record.proUsed != null">
        pro_used = #{record.proUsed,jdbcType=INTEGER},
      </if>
      <if test="record.residue != null">
        residue = #{record.residue,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update api_storage
    set id = #{record.id,jdbcType=BIGINT},
      product_id = #{record.productId,jdbcType=BIGINT},
      pro_total = #{record.proTotal,jdbcType=INTEGER},
      pro_used = #{record.proUsed,jdbcType=INTEGER},
      residue = #{record.residue,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.neverend.storage.entity.ApiStorage">
    update api_storage
    <set>
      <if test="productId != null">
        product_id = #{productId,jdbcType=BIGINT},
      </if>
      <if test="proTotal != null">
        pro_total = #{proTotal,jdbcType=INTEGER},
      </if>
      <if test="proUsed != null">
        pro_used = #{proUsed,jdbcType=INTEGER},
      </if>
      <if test="residue != null">
        residue = #{residue,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.neverend.storage.entity.ApiStorage">
    update api_storage
    set product_id = #{productId,jdbcType=BIGINT},
      pro_total = #{proTotal,jdbcType=INTEGER},
      pro_used = #{proUsed,jdbcType=INTEGER},
      residue = #{residue,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>